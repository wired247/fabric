// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric/orderer/consensus/etcdraft"
	"github.com/hyperledger/fabric/protos/orderer"
)

type FakeRPC struct {
	SendConsensusStub        func(dest uint64, msg *orderer.ConsensusRequest) error
	sendConsensusMutex       sync.RWMutex
	sendConsensusArgsForCall []struct {
		dest uint64
		msg  *orderer.ConsensusRequest
	}
	sendConsensusReturns struct {
		result1 error
	}
	sendConsensusReturnsOnCall map[int]struct {
		result1 error
	}
	SendSubmitStub        func(dest uint64, request *orderer.SubmitRequest) error
	sendSubmitMutex       sync.RWMutex
	sendSubmitArgsForCall []struct {
		dest    uint64
		request *orderer.SubmitRequest
	}
	sendSubmitReturns struct {
		result1 error
	}
	sendSubmitReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRPC) SendConsensus(dest uint64, msg *orderer.ConsensusRequest) error {
	fake.sendConsensusMutex.Lock()
	ret, specificReturn := fake.sendConsensusReturnsOnCall[len(fake.sendConsensusArgsForCall)]
	fake.sendConsensusArgsForCall = append(fake.sendConsensusArgsForCall, struct {
		dest uint64
		msg  *orderer.ConsensusRequest
	}{dest, msg})
	fake.recordInvocation("SendConsensus", []interface{}{dest, msg})
	fake.sendConsensusMutex.Unlock()
	if fake.SendConsensusStub != nil {
		return fake.SendConsensusStub(dest, msg)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendConsensusReturns.result1
}

func (fake *FakeRPC) SendConsensusCallCount() int {
	fake.sendConsensusMutex.RLock()
	defer fake.sendConsensusMutex.RUnlock()
	return len(fake.sendConsensusArgsForCall)
}

func (fake *FakeRPC) SendConsensusArgsForCall(i int) (uint64, *orderer.ConsensusRequest) {
	fake.sendConsensusMutex.RLock()
	defer fake.sendConsensusMutex.RUnlock()
	return fake.sendConsensusArgsForCall[i].dest, fake.sendConsensusArgsForCall[i].msg
}

func (fake *FakeRPC) SendConsensusReturns(result1 error) {
	fake.SendConsensusStub = nil
	fake.sendConsensusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRPC) SendConsensusReturnsOnCall(i int, result1 error) {
	fake.SendConsensusStub = nil
	if fake.sendConsensusReturnsOnCall == nil {
		fake.sendConsensusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendConsensusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRPC) SendSubmit(dest uint64, request *orderer.SubmitRequest) error {
	fake.sendSubmitMutex.Lock()
	ret, specificReturn := fake.sendSubmitReturnsOnCall[len(fake.sendSubmitArgsForCall)]
	fake.sendSubmitArgsForCall = append(fake.sendSubmitArgsForCall, struct {
		dest    uint64
		request *orderer.SubmitRequest
	}{dest, request})
	fake.recordInvocation("SendSubmit", []interface{}{dest, request})
	fake.sendSubmitMutex.Unlock()
	if fake.SendSubmitStub != nil {
		return fake.SendSubmitStub(dest, request)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.sendSubmitReturns.result1
}

func (fake *FakeRPC) SendSubmitCallCount() int {
	fake.sendSubmitMutex.RLock()
	defer fake.sendSubmitMutex.RUnlock()
	return len(fake.sendSubmitArgsForCall)
}

func (fake *FakeRPC) SendSubmitArgsForCall(i int) (uint64, *orderer.SubmitRequest) {
	fake.sendSubmitMutex.RLock()
	defer fake.sendSubmitMutex.RUnlock()
	return fake.sendSubmitArgsForCall[i].dest, fake.sendSubmitArgsForCall[i].request
}

func (fake *FakeRPC) SendSubmitReturns(result1 error) {
	fake.SendSubmitStub = nil
	fake.sendSubmitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRPC) SendSubmitReturnsOnCall(i int, result1 error) {
	fake.SendSubmitStub = nil
	if fake.sendSubmitReturnsOnCall == nil {
		fake.sendSubmitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendSubmitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRPC) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendConsensusMutex.RLock()
	defer fake.sendConsensusMutex.RUnlock()
	fake.sendSubmitMutex.RLock()
	defer fake.sendSubmitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRPC) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ etcdraft.RPC = new(FakeRPC)
