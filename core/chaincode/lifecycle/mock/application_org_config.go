// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	pb "github.com/hyperledger/fabric/protos/peer"
)

type ApplicationOrgConfig struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	MSPIDStub        func() string
	mSPIDMutex       sync.RWMutex
	mSPIDArgsForCall []struct{}
	mSPIDReturns     struct {
		result1 string
	}
	mSPIDReturnsOnCall map[int]struct {
		result1 string
	}
	AnchorPeersStub        func() []*pb.AnchorPeer
	anchorPeersMutex       sync.RWMutex
	anchorPeersArgsForCall []struct{}
	anchorPeersReturns     struct {
		result1 []*pb.AnchorPeer
	}
	anchorPeersReturnsOnCall map[int]struct {
		result1 []*pb.AnchorPeer
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ApplicationOrgConfig) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *ApplicationOrgConfig) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *ApplicationOrgConfig) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *ApplicationOrgConfig) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ApplicationOrgConfig) MSPID() string {
	fake.mSPIDMutex.Lock()
	ret, specificReturn := fake.mSPIDReturnsOnCall[len(fake.mSPIDArgsForCall)]
	fake.mSPIDArgsForCall = append(fake.mSPIDArgsForCall, struct{}{})
	fake.recordInvocation("MSPID", []interface{}{})
	fake.mSPIDMutex.Unlock()
	if fake.MSPIDStub != nil {
		return fake.MSPIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.mSPIDReturns.result1
}

func (fake *ApplicationOrgConfig) MSPIDCallCount() int {
	fake.mSPIDMutex.RLock()
	defer fake.mSPIDMutex.RUnlock()
	return len(fake.mSPIDArgsForCall)
}

func (fake *ApplicationOrgConfig) MSPIDReturns(result1 string) {
	fake.MSPIDStub = nil
	fake.mSPIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *ApplicationOrgConfig) MSPIDReturnsOnCall(i int, result1 string) {
	fake.MSPIDStub = nil
	if fake.mSPIDReturnsOnCall == nil {
		fake.mSPIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.mSPIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ApplicationOrgConfig) AnchorPeers() []*pb.AnchorPeer {
	fake.anchorPeersMutex.Lock()
	ret, specificReturn := fake.anchorPeersReturnsOnCall[len(fake.anchorPeersArgsForCall)]
	fake.anchorPeersArgsForCall = append(fake.anchorPeersArgsForCall, struct{}{})
	fake.recordInvocation("AnchorPeers", []interface{}{})
	fake.anchorPeersMutex.Unlock()
	if fake.AnchorPeersStub != nil {
		return fake.AnchorPeersStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.anchorPeersReturns.result1
}

func (fake *ApplicationOrgConfig) AnchorPeersCallCount() int {
	fake.anchorPeersMutex.RLock()
	defer fake.anchorPeersMutex.RUnlock()
	return len(fake.anchorPeersArgsForCall)
}

func (fake *ApplicationOrgConfig) AnchorPeersReturns(result1 []*pb.AnchorPeer) {
	fake.AnchorPeersStub = nil
	fake.anchorPeersReturns = struct {
		result1 []*pb.AnchorPeer
	}{result1}
}

func (fake *ApplicationOrgConfig) AnchorPeersReturnsOnCall(i int, result1 []*pb.AnchorPeer) {
	fake.AnchorPeersStub = nil
	if fake.anchorPeersReturnsOnCall == nil {
		fake.anchorPeersReturnsOnCall = make(map[int]struct {
			result1 []*pb.AnchorPeer
		})
	}
	fake.anchorPeersReturnsOnCall[i] = struct {
		result1 []*pb.AnchorPeer
	}{result1}
}

func (fake *ApplicationOrgConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.mSPIDMutex.RLock()
	defer fake.mSPIDMutex.RUnlock()
	fake.anchorPeersMutex.RLock()
	defer fake.anchorPeersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ApplicationOrgConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
