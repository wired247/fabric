// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger/fabric/common/chaincode"
	lifecycle_test "github.com/hyperledger/fabric/core/chaincode/lifecycle"
)

type SCCFunctions struct {
	InstallChaincodeStub        func(name, version string, chaincodePackage []byte) (hash []byte, err error)
	installChaincodeMutex       sync.RWMutex
	installChaincodeArgsForCall []struct {
		name             string
		version          string
		chaincodePackage []byte
	}
	installChaincodeReturns struct {
		result1 []byte
		result2 error
	}
	installChaincodeReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	QueryInstalledChaincodeStub        func(name, version string) (hash []byte, err error)
	queryInstalledChaincodeMutex       sync.RWMutex
	queryInstalledChaincodeArgsForCall []struct {
		name    string
		version string
	}
	queryInstalledChaincodeReturns struct {
		result1 []byte
		result2 error
	}
	queryInstalledChaincodeReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	QueryInstalledChaincodesStub        func() (chaincodes []chaincode.InstalledChaincode, err error)
	queryInstalledChaincodesMutex       sync.RWMutex
	queryInstalledChaincodesArgsForCall []struct{}
	queryInstalledChaincodesReturns     struct {
		result1 []chaincode.InstalledChaincode
		result2 error
	}
	queryInstalledChaincodesReturnsOnCall map[int]struct {
		result1 []chaincode.InstalledChaincode
		result2 error
	}
	ApproveChaincodeDefinitionForOrgStub        func(name string, cd *lifecycle_test.ChaincodeDefinition, publicState lifecycle_test.ReadableState, orgState lifecycle_test.ReadWritableState) error
	approveChaincodeDefinitionForOrgMutex       sync.RWMutex
	approveChaincodeDefinitionForOrgArgsForCall []struct {
		name        string
		cd          *lifecycle_test.ChaincodeDefinition
		publicState lifecycle_test.ReadableState
		orgState    lifecycle_test.ReadWritableState
	}
	approveChaincodeDefinitionForOrgReturns struct {
		result1 error
	}
	approveChaincodeDefinitionForOrgReturnsOnCall map[int]struct {
		result1 error
	}
	CommitChaincodeDefinitionStub        func(name string, cd *lifecycle_test.ChaincodeDefinition, publicState lifecycle_test.ReadWritableState, orgStates []lifecycle_test.OpaqueState) ([]bool, error)
	commitChaincodeDefinitionMutex       sync.RWMutex
	commitChaincodeDefinitionArgsForCall []struct {
		name        string
		cd          *lifecycle_test.ChaincodeDefinition
		publicState lifecycle_test.ReadWritableState
		orgStates   []lifecycle_test.OpaqueState
	}
	commitChaincodeDefinitionReturns struct {
		result1 []bool
		result2 error
	}
	commitChaincodeDefinitionReturnsOnCall map[int]struct {
		result1 []bool
		result2 error
	}
	QueryChaincodeDefinitionStub        func(name string, publicState lifecycle_test.ReadableState) (*lifecycle_test.ChaincodeDefinition, error)
	queryChaincodeDefinitionMutex       sync.RWMutex
	queryChaincodeDefinitionArgsForCall []struct {
		name        string
		publicState lifecycle_test.ReadableState
	}
	queryChaincodeDefinitionReturns struct {
		result1 *lifecycle_test.ChaincodeDefinition
		result2 error
	}
	queryChaincodeDefinitionReturnsOnCall map[int]struct {
		result1 *lifecycle_test.ChaincodeDefinition
		result2 error
	}
	QueryNamespaceDefinitionsStub        func(publicState lifecycle_test.RangeableState) (map[string]string, error)
	queryNamespaceDefinitionsMutex       sync.RWMutex
	queryNamespaceDefinitionsArgsForCall []struct {
		publicState lifecycle_test.RangeableState
	}
	queryNamespaceDefinitionsReturns struct {
		result1 map[string]string
		result2 error
	}
	queryNamespaceDefinitionsReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SCCFunctions) InstallChaincode(name string, version string, chaincodePackage []byte) (hash []byte, err error) {
	var chaincodePackageCopy []byte
	if chaincodePackage != nil {
		chaincodePackageCopy = make([]byte, len(chaincodePackage))
		copy(chaincodePackageCopy, chaincodePackage)
	}
	fake.installChaincodeMutex.Lock()
	ret, specificReturn := fake.installChaincodeReturnsOnCall[len(fake.installChaincodeArgsForCall)]
	fake.installChaincodeArgsForCall = append(fake.installChaincodeArgsForCall, struct {
		name             string
		version          string
		chaincodePackage []byte
	}{name, version, chaincodePackageCopy})
	fake.recordInvocation("InstallChaincode", []interface{}{name, version, chaincodePackageCopy})
	fake.installChaincodeMutex.Unlock()
	if fake.InstallChaincodeStub != nil {
		return fake.InstallChaincodeStub(name, version, chaincodePackage)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.installChaincodeReturns.result1, fake.installChaincodeReturns.result2
}

func (fake *SCCFunctions) InstallChaincodeCallCount() int {
	fake.installChaincodeMutex.RLock()
	defer fake.installChaincodeMutex.RUnlock()
	return len(fake.installChaincodeArgsForCall)
}

func (fake *SCCFunctions) InstallChaincodeArgsForCall(i int) (string, string, []byte) {
	fake.installChaincodeMutex.RLock()
	defer fake.installChaincodeMutex.RUnlock()
	return fake.installChaincodeArgsForCall[i].name, fake.installChaincodeArgsForCall[i].version, fake.installChaincodeArgsForCall[i].chaincodePackage
}

func (fake *SCCFunctions) InstallChaincodeReturns(result1 []byte, result2 error) {
	fake.InstallChaincodeStub = nil
	fake.installChaincodeReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) InstallChaincodeReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.InstallChaincodeStub = nil
	if fake.installChaincodeReturnsOnCall == nil {
		fake.installChaincodeReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.installChaincodeReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) QueryInstalledChaincode(name string, version string) (hash []byte, err error) {
	fake.queryInstalledChaincodeMutex.Lock()
	ret, specificReturn := fake.queryInstalledChaincodeReturnsOnCall[len(fake.queryInstalledChaincodeArgsForCall)]
	fake.queryInstalledChaincodeArgsForCall = append(fake.queryInstalledChaincodeArgsForCall, struct {
		name    string
		version string
	}{name, version})
	fake.recordInvocation("QueryInstalledChaincode", []interface{}{name, version})
	fake.queryInstalledChaincodeMutex.Unlock()
	if fake.QueryInstalledChaincodeStub != nil {
		return fake.QueryInstalledChaincodeStub(name, version)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryInstalledChaincodeReturns.result1, fake.queryInstalledChaincodeReturns.result2
}

func (fake *SCCFunctions) QueryInstalledChaincodeCallCount() int {
	fake.queryInstalledChaincodeMutex.RLock()
	defer fake.queryInstalledChaincodeMutex.RUnlock()
	return len(fake.queryInstalledChaincodeArgsForCall)
}

func (fake *SCCFunctions) QueryInstalledChaincodeArgsForCall(i int) (string, string) {
	fake.queryInstalledChaincodeMutex.RLock()
	defer fake.queryInstalledChaincodeMutex.RUnlock()
	return fake.queryInstalledChaincodeArgsForCall[i].name, fake.queryInstalledChaincodeArgsForCall[i].version
}

func (fake *SCCFunctions) QueryInstalledChaincodeReturns(result1 []byte, result2 error) {
	fake.QueryInstalledChaincodeStub = nil
	fake.queryInstalledChaincodeReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) QueryInstalledChaincodeReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.QueryInstalledChaincodeStub = nil
	if fake.queryInstalledChaincodeReturnsOnCall == nil {
		fake.queryInstalledChaincodeReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.queryInstalledChaincodeReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) QueryInstalledChaincodes() (chaincodes []chaincode.InstalledChaincode, err error) {
	fake.queryInstalledChaincodesMutex.Lock()
	ret, specificReturn := fake.queryInstalledChaincodesReturnsOnCall[len(fake.queryInstalledChaincodesArgsForCall)]
	fake.queryInstalledChaincodesArgsForCall = append(fake.queryInstalledChaincodesArgsForCall, struct{}{})
	fake.recordInvocation("QueryInstalledChaincodes", []interface{}{})
	fake.queryInstalledChaincodesMutex.Unlock()
	if fake.QueryInstalledChaincodesStub != nil {
		return fake.QueryInstalledChaincodesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryInstalledChaincodesReturns.result1, fake.queryInstalledChaincodesReturns.result2
}

func (fake *SCCFunctions) QueryInstalledChaincodesCallCount() int {
	fake.queryInstalledChaincodesMutex.RLock()
	defer fake.queryInstalledChaincodesMutex.RUnlock()
	return len(fake.queryInstalledChaincodesArgsForCall)
}

func (fake *SCCFunctions) QueryInstalledChaincodesReturns(result1 []chaincode.InstalledChaincode, result2 error) {
	fake.QueryInstalledChaincodesStub = nil
	fake.queryInstalledChaincodesReturns = struct {
		result1 []chaincode.InstalledChaincode
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) QueryInstalledChaincodesReturnsOnCall(i int, result1 []chaincode.InstalledChaincode, result2 error) {
	fake.QueryInstalledChaincodesStub = nil
	if fake.queryInstalledChaincodesReturnsOnCall == nil {
		fake.queryInstalledChaincodesReturnsOnCall = make(map[int]struct {
			result1 []chaincode.InstalledChaincode
			result2 error
		})
	}
	fake.queryInstalledChaincodesReturnsOnCall[i] = struct {
		result1 []chaincode.InstalledChaincode
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) ApproveChaincodeDefinitionForOrg(name string, cd *lifecycle_test.ChaincodeDefinition, publicState lifecycle_test.ReadableState, orgState lifecycle_test.ReadWritableState) error {
	fake.approveChaincodeDefinitionForOrgMutex.Lock()
	ret, specificReturn := fake.approveChaincodeDefinitionForOrgReturnsOnCall[len(fake.approveChaincodeDefinitionForOrgArgsForCall)]
	fake.approveChaincodeDefinitionForOrgArgsForCall = append(fake.approveChaincodeDefinitionForOrgArgsForCall, struct {
		name        string
		cd          *lifecycle_test.ChaincodeDefinition
		publicState lifecycle_test.ReadableState
		orgState    lifecycle_test.ReadWritableState
	}{name, cd, publicState, orgState})
	fake.recordInvocation("ApproveChaincodeDefinitionForOrg", []interface{}{name, cd, publicState, orgState})
	fake.approveChaincodeDefinitionForOrgMutex.Unlock()
	if fake.ApproveChaincodeDefinitionForOrgStub != nil {
		return fake.ApproveChaincodeDefinitionForOrgStub(name, cd, publicState, orgState)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.approveChaincodeDefinitionForOrgReturns.result1
}

func (fake *SCCFunctions) ApproveChaincodeDefinitionForOrgCallCount() int {
	fake.approveChaincodeDefinitionForOrgMutex.RLock()
	defer fake.approveChaincodeDefinitionForOrgMutex.RUnlock()
	return len(fake.approveChaincodeDefinitionForOrgArgsForCall)
}

func (fake *SCCFunctions) ApproveChaincodeDefinitionForOrgArgsForCall(i int) (string, *lifecycle_test.ChaincodeDefinition, lifecycle_test.ReadableState, lifecycle_test.ReadWritableState) {
	fake.approveChaincodeDefinitionForOrgMutex.RLock()
	defer fake.approveChaincodeDefinitionForOrgMutex.RUnlock()
	return fake.approveChaincodeDefinitionForOrgArgsForCall[i].name, fake.approveChaincodeDefinitionForOrgArgsForCall[i].cd, fake.approveChaincodeDefinitionForOrgArgsForCall[i].publicState, fake.approveChaincodeDefinitionForOrgArgsForCall[i].orgState
}

func (fake *SCCFunctions) ApproveChaincodeDefinitionForOrgReturns(result1 error) {
	fake.ApproveChaincodeDefinitionForOrgStub = nil
	fake.approveChaincodeDefinitionForOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *SCCFunctions) ApproveChaincodeDefinitionForOrgReturnsOnCall(i int, result1 error) {
	fake.ApproveChaincodeDefinitionForOrgStub = nil
	if fake.approveChaincodeDefinitionForOrgReturnsOnCall == nil {
		fake.approveChaincodeDefinitionForOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.approveChaincodeDefinitionForOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SCCFunctions) CommitChaincodeDefinition(name string, cd *lifecycle_test.ChaincodeDefinition, publicState lifecycle_test.ReadWritableState, orgStates []lifecycle_test.OpaqueState) ([]bool, error) {
	var orgStatesCopy []lifecycle_test.OpaqueState
	if orgStates != nil {
		orgStatesCopy = make([]lifecycle_test.OpaqueState, len(orgStates))
		copy(orgStatesCopy, orgStates)
	}
	fake.commitChaincodeDefinitionMutex.Lock()
	ret, specificReturn := fake.commitChaincodeDefinitionReturnsOnCall[len(fake.commitChaincodeDefinitionArgsForCall)]
	fake.commitChaincodeDefinitionArgsForCall = append(fake.commitChaincodeDefinitionArgsForCall, struct {
		name        string
		cd          *lifecycle_test.ChaincodeDefinition
		publicState lifecycle_test.ReadWritableState
		orgStates   []lifecycle_test.OpaqueState
	}{name, cd, publicState, orgStatesCopy})
	fake.recordInvocation("CommitChaincodeDefinition", []interface{}{name, cd, publicState, orgStatesCopy})
	fake.commitChaincodeDefinitionMutex.Unlock()
	if fake.CommitChaincodeDefinitionStub != nil {
		return fake.CommitChaincodeDefinitionStub(name, cd, publicState, orgStates)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.commitChaincodeDefinitionReturns.result1, fake.commitChaincodeDefinitionReturns.result2
}

func (fake *SCCFunctions) CommitChaincodeDefinitionCallCount() int {
	fake.commitChaincodeDefinitionMutex.RLock()
	defer fake.commitChaincodeDefinitionMutex.RUnlock()
	return len(fake.commitChaincodeDefinitionArgsForCall)
}

func (fake *SCCFunctions) CommitChaincodeDefinitionArgsForCall(i int) (string, *lifecycle_test.ChaincodeDefinition, lifecycle_test.ReadWritableState, []lifecycle_test.OpaqueState) {
	fake.commitChaincodeDefinitionMutex.RLock()
	defer fake.commitChaincodeDefinitionMutex.RUnlock()
	return fake.commitChaincodeDefinitionArgsForCall[i].name, fake.commitChaincodeDefinitionArgsForCall[i].cd, fake.commitChaincodeDefinitionArgsForCall[i].publicState, fake.commitChaincodeDefinitionArgsForCall[i].orgStates
}

func (fake *SCCFunctions) CommitChaincodeDefinitionReturns(result1 []bool, result2 error) {
	fake.CommitChaincodeDefinitionStub = nil
	fake.commitChaincodeDefinitionReturns = struct {
		result1 []bool
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) CommitChaincodeDefinitionReturnsOnCall(i int, result1 []bool, result2 error) {
	fake.CommitChaincodeDefinitionStub = nil
	if fake.commitChaincodeDefinitionReturnsOnCall == nil {
		fake.commitChaincodeDefinitionReturnsOnCall = make(map[int]struct {
			result1 []bool
			result2 error
		})
	}
	fake.commitChaincodeDefinitionReturnsOnCall[i] = struct {
		result1 []bool
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) QueryChaincodeDefinition(name string, publicState lifecycle_test.ReadableState) (*lifecycle_test.ChaincodeDefinition, error) {
	fake.queryChaincodeDefinitionMutex.Lock()
	ret, specificReturn := fake.queryChaincodeDefinitionReturnsOnCall[len(fake.queryChaincodeDefinitionArgsForCall)]
	fake.queryChaincodeDefinitionArgsForCall = append(fake.queryChaincodeDefinitionArgsForCall, struct {
		name        string
		publicState lifecycle_test.ReadableState
	}{name, publicState})
	fake.recordInvocation("QueryChaincodeDefinition", []interface{}{name, publicState})
	fake.queryChaincodeDefinitionMutex.Unlock()
	if fake.QueryChaincodeDefinitionStub != nil {
		return fake.QueryChaincodeDefinitionStub(name, publicState)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryChaincodeDefinitionReturns.result1, fake.queryChaincodeDefinitionReturns.result2
}

func (fake *SCCFunctions) QueryChaincodeDefinitionCallCount() int {
	fake.queryChaincodeDefinitionMutex.RLock()
	defer fake.queryChaincodeDefinitionMutex.RUnlock()
	return len(fake.queryChaincodeDefinitionArgsForCall)
}

func (fake *SCCFunctions) QueryChaincodeDefinitionArgsForCall(i int) (string, lifecycle_test.ReadableState) {
	fake.queryChaincodeDefinitionMutex.RLock()
	defer fake.queryChaincodeDefinitionMutex.RUnlock()
	return fake.queryChaincodeDefinitionArgsForCall[i].name, fake.queryChaincodeDefinitionArgsForCall[i].publicState
}

func (fake *SCCFunctions) QueryChaincodeDefinitionReturns(result1 *lifecycle_test.ChaincodeDefinition, result2 error) {
	fake.QueryChaincodeDefinitionStub = nil
	fake.queryChaincodeDefinitionReturns = struct {
		result1 *lifecycle_test.ChaincodeDefinition
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) QueryChaincodeDefinitionReturnsOnCall(i int, result1 *lifecycle_test.ChaincodeDefinition, result2 error) {
	fake.QueryChaincodeDefinitionStub = nil
	if fake.queryChaincodeDefinitionReturnsOnCall == nil {
		fake.queryChaincodeDefinitionReturnsOnCall = make(map[int]struct {
			result1 *lifecycle_test.ChaincodeDefinition
			result2 error
		})
	}
	fake.queryChaincodeDefinitionReturnsOnCall[i] = struct {
		result1 *lifecycle_test.ChaincodeDefinition
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) QueryNamespaceDefinitions(publicState lifecycle_test.RangeableState) (map[string]string, error) {
	fake.queryNamespaceDefinitionsMutex.Lock()
	ret, specificReturn := fake.queryNamespaceDefinitionsReturnsOnCall[len(fake.queryNamespaceDefinitionsArgsForCall)]
	fake.queryNamespaceDefinitionsArgsForCall = append(fake.queryNamespaceDefinitionsArgsForCall, struct {
		publicState lifecycle_test.RangeableState
	}{publicState})
	fake.recordInvocation("QueryNamespaceDefinitions", []interface{}{publicState})
	fake.queryNamespaceDefinitionsMutex.Unlock()
	if fake.QueryNamespaceDefinitionsStub != nil {
		return fake.QueryNamespaceDefinitionsStub(publicState)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryNamespaceDefinitionsReturns.result1, fake.queryNamespaceDefinitionsReturns.result2
}

func (fake *SCCFunctions) QueryNamespaceDefinitionsCallCount() int {
	fake.queryNamespaceDefinitionsMutex.RLock()
	defer fake.queryNamespaceDefinitionsMutex.RUnlock()
	return len(fake.queryNamespaceDefinitionsArgsForCall)
}

func (fake *SCCFunctions) QueryNamespaceDefinitionsArgsForCall(i int) lifecycle_test.RangeableState {
	fake.queryNamespaceDefinitionsMutex.RLock()
	defer fake.queryNamespaceDefinitionsMutex.RUnlock()
	return fake.queryNamespaceDefinitionsArgsForCall[i].publicState
}

func (fake *SCCFunctions) QueryNamespaceDefinitionsReturns(result1 map[string]string, result2 error) {
	fake.QueryNamespaceDefinitionsStub = nil
	fake.queryNamespaceDefinitionsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) QueryNamespaceDefinitionsReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.QueryNamespaceDefinitionsStub = nil
	if fake.queryNamespaceDefinitionsReturnsOnCall == nil {
		fake.queryNamespaceDefinitionsReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.queryNamespaceDefinitionsReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *SCCFunctions) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.installChaincodeMutex.RLock()
	defer fake.installChaincodeMutex.RUnlock()
	fake.queryInstalledChaincodeMutex.RLock()
	defer fake.queryInstalledChaincodeMutex.RUnlock()
	fake.queryInstalledChaincodesMutex.RLock()
	defer fake.queryInstalledChaincodesMutex.RUnlock()
	fake.approveChaincodeDefinitionForOrgMutex.RLock()
	defer fake.approveChaincodeDefinitionForOrgMutex.RUnlock()
	fake.commitChaincodeDefinitionMutex.RLock()
	defer fake.commitChaincodeDefinitionMutex.RUnlock()
	fake.queryChaincodeDefinitionMutex.RLock()
	defer fake.queryChaincodeDefinitionMutex.RUnlock()
	fake.queryNamespaceDefinitionsMutex.RLock()
	defer fake.queryNamespaceDefinitionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SCCFunctions) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
