// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger/fabric/common/policies"
)

type PolicyManager struct {
	GetPolicyStub        func(id string) (policies.Policy, bool)
	getPolicyMutex       sync.RWMutex
	getPolicyArgsForCall []struct {
		id string
	}
	getPolicyReturns struct {
		result1 policies.Policy
		result2 bool
	}
	getPolicyReturnsOnCall map[int]struct {
		result1 policies.Policy
		result2 bool
	}
	ManagerStub        func(path []string) (policies.Manager, bool)
	managerMutex       sync.RWMutex
	managerArgsForCall []struct {
		path []string
	}
	managerReturns struct {
		result1 policies.Manager
		result2 bool
	}
	managerReturnsOnCall map[int]struct {
		result1 policies.Manager
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PolicyManager) GetPolicy(id string) (policies.Policy, bool) {
	fake.getPolicyMutex.Lock()
	ret, specificReturn := fake.getPolicyReturnsOnCall[len(fake.getPolicyArgsForCall)]
	fake.getPolicyArgsForCall = append(fake.getPolicyArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("GetPolicy", []interface{}{id})
	fake.getPolicyMutex.Unlock()
	if fake.GetPolicyStub != nil {
		return fake.GetPolicyStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPolicyReturns.result1, fake.getPolicyReturns.result2
}

func (fake *PolicyManager) GetPolicyCallCount() int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	return len(fake.getPolicyArgsForCall)
}

func (fake *PolicyManager) GetPolicyArgsForCall(i int) string {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	return fake.getPolicyArgsForCall[i].id
}

func (fake *PolicyManager) GetPolicyReturns(result1 policies.Policy, result2 bool) {
	fake.GetPolicyStub = nil
	fake.getPolicyReturns = struct {
		result1 policies.Policy
		result2 bool
	}{result1, result2}
}

func (fake *PolicyManager) GetPolicyReturnsOnCall(i int, result1 policies.Policy, result2 bool) {
	fake.GetPolicyStub = nil
	if fake.getPolicyReturnsOnCall == nil {
		fake.getPolicyReturnsOnCall = make(map[int]struct {
			result1 policies.Policy
			result2 bool
		})
	}
	fake.getPolicyReturnsOnCall[i] = struct {
		result1 policies.Policy
		result2 bool
	}{result1, result2}
}

func (fake *PolicyManager) Manager(path []string) (policies.Manager, bool) {
	var pathCopy []string
	if path != nil {
		pathCopy = make([]string, len(path))
		copy(pathCopy, path)
	}
	fake.managerMutex.Lock()
	ret, specificReturn := fake.managerReturnsOnCall[len(fake.managerArgsForCall)]
	fake.managerArgsForCall = append(fake.managerArgsForCall, struct {
		path []string
	}{pathCopy})
	fake.recordInvocation("Manager", []interface{}{pathCopy})
	fake.managerMutex.Unlock()
	if fake.ManagerStub != nil {
		return fake.ManagerStub(path)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.managerReturns.result1, fake.managerReturns.result2
}

func (fake *PolicyManager) ManagerCallCount() int {
	fake.managerMutex.RLock()
	defer fake.managerMutex.RUnlock()
	return len(fake.managerArgsForCall)
}

func (fake *PolicyManager) ManagerArgsForCall(i int) []string {
	fake.managerMutex.RLock()
	defer fake.managerMutex.RUnlock()
	return fake.managerArgsForCall[i].path
}

func (fake *PolicyManager) ManagerReturns(result1 policies.Manager, result2 bool) {
	fake.ManagerStub = nil
	fake.managerReturns = struct {
		result1 policies.Manager
		result2 bool
	}{result1, result2}
}

func (fake *PolicyManager) ManagerReturnsOnCall(i int, result1 policies.Manager, result2 bool) {
	fake.ManagerStub = nil
	if fake.managerReturnsOnCall == nil {
		fake.managerReturnsOnCall = make(map[int]struct {
			result1 policies.Manager
			result2 bool
		})
	}
	fake.managerReturnsOnCall[i] = struct {
		result1 policies.Manager
		result2 bool
	}{result1, result2}
}

func (fake *PolicyManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	fake.managerMutex.RLock()
	defer fake.managerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PolicyManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
